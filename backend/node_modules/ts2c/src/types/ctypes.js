"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UniversalVarType = "struct js_var";
exports.VoidType = "void";
exports.PointerVarType = "void *";
exports.StringVarType = "const char *";
exports.NumberVarType = "int16_t";
exports.BooleanVarType = "uint8_t";
exports.RegexVarType = "struct regex_struct_t";
exports.RegexMatchVarType = "struct regex_match_struct_t";
function getTypeBodyText(t) { return typeof t === "string" ? t : t.getBodyText(); }
exports.getTypeBodyText = getTypeBodyText;
function getTypeText(t) { return typeof (t) === "string" ? t : t.getText(); }
exports.getTypeText = getTypeText;
/** Type that represents static or dynamic array */
var ArrayType = /** @class */ (function () {
    function ArrayType(elementType, capacity, isDynamicArray) {
        this.elementType = elementType;
        this.capacity = capacity;
        this.isDynamicArray = isDynamicArray;
    }
    ArrayType.getArrayStructName = function (elementTypeText) {
        while (elementTypeText.indexOf(exports.NumberVarType) > -1)
            elementTypeText = elementTypeText.replace(exports.NumberVarType, "number");
        while (elementTypeText.indexOf(exports.StringVarType) > -1)
            elementTypeText = elementTypeText.replace(exports.StringVarType, "string");
        while (elementTypeText.indexOf(exports.PointerVarType) > -1)
            elementTypeText = elementTypeText.replace(exports.PointerVarType, "pointer");
        while (elementTypeText.indexOf(exports.BooleanVarType) > -1)
            elementTypeText = elementTypeText.replace(exports.BooleanVarType, "bool");
        elementTypeText = elementTypeText.replace(/^struct ([a-z0-9_]+)_t \*$/, function (all, g1) { return g1; }).replace(/^struct js_var/, "js_var");
        return "array_" +
            elementTypeText
                .replace(/^static /, '').replace('{var}', '').replace(/[\[\]]/g, '')
                .replace(/ /g, '_')
                .replace(/const char \*/g, 'string')
                .replace(/\*/g, 'p') + "_t";
    };
    ArrayType.prototype.getText = function () {
        var elementType = this.elementType;
        var elementTypeText;
        if (typeof elementType === 'string')
            elementTypeText = elementType;
        else
            elementTypeText = elementType.getText();
        var structName = ArrayType.getArrayStructName(elementTypeText);
        if (this.isDynamicArray)
            return "struct " + structName + " *";
        else if (elementTypeText.indexOf('{var}') > -1)
            return elementTypeText + "[" + this.capacity + "]";
        else
            return "static " + elementTypeText + " {var}[" + this.capacity + "]";
    };
    ArrayType.prototype.getBodyText = function () {
        return getTypeBodyText(this.elementType) + "[" + (this.isDynamicArray ? "" : this.capacity) + "]";
    };
    return ArrayType;
}());
exports.ArrayType = ArrayType;
/** Type that represents JS object with static properties (implemented as C struct) */
var StructType = /** @class */ (function () {
    function StructType(propertyDefs) {
        this.propertyDefs = propertyDefs;
    }
    StructType.prototype.getText = function () {
        return this.forcedType || 'struct ' + this.structName + ' *';
    };
    Object.defineProperty(StructType.prototype, "properties", {
        get: function () {
            var _this = this;
            return Object.keys(this.propertyDefs)
                .sort(function (a, b) { return _this.propertyDefs[a].order - _this.propertyDefs[b].order; })
                .reduce(function (acc, k) { acc[k] = _this.propertyDefs[k].type; return acc; }, {});
        },
        enumerable: true,
        configurable: true
    });
    StructType.prototype.getBodyText = function () {
        var _this = this;
        return "{" + Object.keys(this.propertyDefs).sort().map(function (k) { return k + ": " + getTypeBodyText(_this.properties[k]); }).join("; ") + "}";
    };
    return StructType;
}());
exports.StructType = StructType;
/** Type that represents JS object with dynamic properties (implemented as dynamic dictionary) */
var DictType = /** @class */ (function () {
    function DictType(elementType) {
        this.elementType = elementType;
    }
    DictType.prototype.getText = function () {
        if (this.elementType == exports.UniversalVarType)
            return "struct dict_js_var_t *";
        else
            return "DICT(" + (typeof this.elementType === "string" ? this.elementType : this.elementType.getText()) + ")";
    };
    DictType.prototype.getBodyText = function () {
        return "{" + getTypeBodyText(this.elementType) + "}";
    };
    return DictType;
}());
exports.DictType = DictType;
var FuncType = /** @class */ (function () {
    function FuncType(data) {
        this.returnType = data.returnType || exports.VoidType;
        this.parameterTypes = data.parameterTypes || [];
        this.instanceType = data.instanceType || null;
        this.closureParams = data.closureParams || [];
        this.needsClosureStruct = data.needsClosureStruct || false;
        this.scopeType = data.scopeType || null;
        this.structName = data.structName || null;
    }
    FuncType.getReturnType = function (typeHelper, node) {
        var type = typeHelper.getCType(node);
        return type && type instanceof FuncType ? type.returnType : null;
    };
    FuncType.getInstanceType = function (typeHelper, node) {
        var type = typeHelper.getCType(node);
        return type && type instanceof FuncType ? type.instanceType : null;
    };
    FuncType.prototype.getText = function (forceFuncType) {
        if (forceFuncType === void 0) { forceFuncType = false; }
        if (this.closureParams.length && !forceFuncType)
            return 'struct ' + this.structName + ' *';
        var retType = getTypeText(this.returnType).replace(/ \{var\}\[\d+\]/g, "* {var}").replace(/^static /, "");
        if (retType.indexOf("{var}") == -1)
            retType += " {var}";
        return retType.replace(" {var}", " (*{var})") + "("
            + this.parameterTypes
                .map(function (t) { return getTypeText(t).replace(/\ {var\}/, "").replace(/^static /, ""); })
                .concat(this.closureParams.length ? ['struct ' + this.structName + ' *'] : [])
                .join(', ')
            + ")";
    };
    FuncType.prototype.getBodyText = function () {
        var paramTypes = [].concat(this.parameterTypes);
        if (this.instanceType)
            paramTypes.unshift(this.instanceType);
        return getTypeBodyText(this.returnType)
            + "(" + paramTypes.map(function (pt) { return pt ? getTypeBodyText(pt) : exports.PointerVarType; }).join(", ") + ")"
            + (this.scopeType ? " scope=" + getTypeBodyText(this.scopeType) : "")
            + (this.closureParams.length ? " closure" : "")
            + (this.needsClosureStruct ? "_struct" : "")
            + (this.closureParams.length ? "={" + this.closureParams.map(function (p) { return (p.assigned ? "*" : "") + p.node.text + "(" + p.refs.map(function (r) { return r.pos; }).join(",") + ")"; }).join(", ") + "}" : "");
    };
    return FuncType;
}());
exports.FuncType = FuncType;
//# sourceMappingURL=ctypes.js.map