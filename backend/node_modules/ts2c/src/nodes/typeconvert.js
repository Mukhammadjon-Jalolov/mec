"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var ts = require("typescript");
var ctypes_1 = require("../types/ctypes");
var template_1 = require("../template");
var utils_1 = require("../types/utils");
var elementaccess_1 = require("./elementaccess");
var variable_1 = require("./variable");
var CAsUniversalVar = /** @class */ (function (_super) {
    __extends(CAsUniversalVar, _super);
    function CAsUniversalVar(scope, expr, type) {
        var _this = _super.call(this) || this;
        _this.expression = utils_1.isNode(expr) ? template_1.CodeTemplateFactory.createForNode(scope, expr) : expr;
        type = type || utils_1.isNode(expr) && scope.root.typeHelper.getCType(expr);
        _this.isUniversalVar = type === ctypes_1.UniversalVarType;
        _this.isString = type === ctypes_1.StringVarType;
        _this.isNumber = type === ctypes_1.NumberVarType;
        _this.isBoolean = type === ctypes_1.BooleanVarType;
        _this.isArray = type instanceof ctypes_1.ArrayType;
        _this.isDict = type instanceof ctypes_1.StructType || type instanceof ctypes_1.DictType;
        if (type === ctypes_1.StringVarType)
            scope.root.headerFlags.js_var_from_str = true;
        if (type === ctypes_1.NumberVarType)
            scope.root.headerFlags.js_var_from_int16_t = true;
        if (type === ctypes_1.BooleanVarType)
            scope.root.headerFlags.js_var_from_uint8_t = true;
        if (type instanceof ctypes_1.ArrayType)
            scope.root.headerFlags.js_var_array = true;
        if (type instanceof ctypes_1.StructType || type instanceof ctypes_1.DictType)
            scope.root.headerFlags.js_var_dict = true;
        scope.root.headerFlags.js_var = true;
        return _this;
    }
    CAsUniversalVar = __decorate([
        template_1.CodeTemplate("\n{#if isUniversalVar}\n    {expression}\n{#elseif isString}\n    js_var_from_str({expression})\n{#elseif isNumber}\n    js_var_from_int16_t({expression})\n{#elseif isBoolean}\n    js_var_from_uint8_t({expression})\n{#elseif isArray}\n    js_var_from_array({expression})\n{#elseif isDict}\n    js_var_from_dict({expression})\n{#else}\n    /** converting {expression} to js_var is not supported yet */\n{/if}")
    ], CAsUniversalVar);
    return CAsUniversalVar;
}(template_1.CTemplateBase));
exports.CAsUniversalVar = CAsUniversalVar;
var CAsNumber = /** @class */ (function (_super) {
    __extends(CAsNumber, _super);
    function CAsNumber(scope, expr, type) {
        var _this = _super.call(this) || this;
        _this.type = type;
        _this.isSingleElementStaticArray = false;
        _this.expression = utils_1.isNode(expr) ? template_1.CodeTemplateFactory.createForNode(scope, expr) : expr;
        type = type || utils_1.isNode(expr) && scope.root.typeHelper.getCType(expr);
        _this.isNumber = type === ctypes_1.NumberVarType;
        _this.isString = type === ctypes_1.StringVarType;
        _this.isBoolean = type === ctypes_1.BooleanVarType;
        _this.isUniversalVar = type === ctypes_1.UniversalVarType;
        if (type instanceof ctypes_1.ArrayType && !type.isDynamicArray && type.capacity === 1) {
            _this.isSingleElementStaticArray = true;
            _this.arrayFirstElementAsNumber = new CAsNumber_1(scope, new elementaccess_1.CSimpleElementAccess(scope, type, _this.expression, "0"), type.elementType);
        }
        if (_this.isString)
            scope.root.headerFlags.str_to_int16_t = true;
        if (_this.isUniversalVar)
            scope.root.headerFlags.js_var_to_number = true;
        if (!_this.isNumber && !_this.isBoolean && !_this.isString && !_this.isUniversalVar && !_this.isSingleElementStaticArray)
            scope.root.headerFlags.js_var_from = true;
        return _this;
    }
    CAsNumber_1 = CAsNumber;
    CAsNumber = CAsNumber_1 = __decorate([
        template_1.CodeTemplate("\n{#if isNumber || isBoolean}\n    {expression}\n{#elseif isString}\n    str_to_int16_t({expression})\n{#elseif isUniversalVar}\n    js_var_to_number({expression})\n{#elseif isSingleElementStaticArray}\n    {arrayFirstElementAsNumber}\n{#else}\n    js_var_from(JS_VAR_NAN)\n{/if}")
    ], CAsNumber);
    return CAsNumber;
    var CAsNumber_1;
}(template_1.CTemplateBase));
exports.CAsNumber = CAsNumber;
var CAsString = /** @class */ (function (_super) {
    __extends(CAsString, _super);
    function CAsString(scope, node) {
        var _this = _super.call(this) || this;
        var type = scope.root.typeHelper.getCType(node);
        _this.arg = template_1.CodeTemplateFactory.createForNode(scope, node);
        _this.isNumberLiteral = ts.isNumericLiteral(node);
        _this.isNumber = !_this.isNumberLiteral && type === ctypes_1.NumberVarType;
        _this.isString = type === ctypes_1.StringVarType;
        _this.isBoolean = type === ctypes_1.BooleanVarType;
        _this.isUniversalVar = type === ctypes_1.UniversalVarType;
        _this.isArray = type instanceof ctypes_1.ArrayType;
        if (_this.isNumber || _this.isArray || _this.isUniversalVar) {
            _this.tmpVarName = scope.root.symbolsHelper.addTemp(node, "buf");
            scope.variables.push(new variable_1.CVariable(scope, _this.tmpVarName, "char *"));
            scope.root.headerFlags.gc_iterator = true;
        }
        if (_this.isNumber)
            scope.root.headerFlags.str_int16_t_buflen = true;
        if (type instanceof ctypes_1.ArrayType) {
            _this.iteratorVarName = scope.root.symbolsHelper.addIterator(node);
            scope.variables.push(new variable_1.CVariable(scope, _this.iteratorVarName, ctypes_1.NumberVarType));
            var arrayElement = new elementaccess_1.CSimpleElementAccess(scope, type, _this.arg, _this.iteratorVarName);
            _this.arrayElementCat = new CAsString_Concat(scope, node, _this.tmpVarName, arrayElement, type.elementType);
            _this.arraySize = new elementaccess_1.CArraySize(scope, _this.arg, type);
            _this.arrayStrLen = new CAsString_Length(scope, node, _this.arg, type);
        }
        return _this;
    }
    CAsString = __decorate([
        template_1.CodeTemplate("\n{#statements}\n    {#if isNumber}\n        {tmpVarName} = malloc(STR_INT16_T_BUFLEN);\n        assert({tmpVarName} != NULL);\n        sprintf({tmpVarName}, \"%d\", {arg});\n        ARRAY_PUSH(gc_main, (void *){tmpVarName});\n    {#elseif isUniversalVar}\n        {tmpVarName} = js_var_to_str({arg}, &{needDisposeVarName});\n        if ({needDisposeVarName})\n            ARRAY_PUSH(gc_main, (void *){tmpVarName});\n    {#elseif isArray}\n        {tmpVarName} = malloc({arrayStrLen});\n        assert({tmpVarName} != NULL);\n        {tmpVarName}[0] = '\\0';\n        for ({iteratorVarName} = 0; {iteratorVarName} < {arraySize}; {iteratorVarName}++) {\n            if ({iteratorVarName} != 0)\n                strcat({tmpVarName}, \",\");\n            {arrayElementCat}\n        }\n        ARRAY_PUSH(gc_main, (void *){tmpVarName});\n    {/if}\n{/statements}\n{#if isNumberLiteral}\n    \"{arg}\"\n{#elseif isString}\n    {arg}\n{#elseif isBoolean}\n    ({arg} ? \"true\" : \"false\")\n{#elseif isUniversalVar || isArray || isNumber}\n    {tmpVarName}\n{#else}\n    \"[object Object]\"\n{/if}")
    ], CAsString);
    return CAsString;
}(template_1.CTemplateBase));
exports.CAsString = CAsString;
var CAsString_Length = /** @class */ (function (_super) {
    __extends(CAsString_Length, _super);
    function CAsString_Length(scope, node, arg, type) {
        var _this = _super.call(this) || this;
        _this.arg = arg;
        _this.type = type;
        _this.isNumber = type === ctypes_1.NumberVarType;
        _this.isString = type === ctypes_1.StringVarType;
        _this.isBoolean = type === ctypes_1.BooleanVarType;
        _this.isArrayOfString = type instanceof ctypes_1.ArrayType && type.elementType === ctypes_1.StringVarType;
        _this.isArrayOfNumber = type instanceof ctypes_1.ArrayType && type.elementType === ctypes_1.NumberVarType;
        _this.isArrayOfBoolean = type instanceof ctypes_1.ArrayType && type.elementType === ctypes_1.BooleanVarType;
        _this.isArrayOfUniversalVar = type instanceof ctypes_1.ArrayType && type.elementType === ctypes_1.UniversalVarType;
        _this.isArrayOfArray = type instanceof ctypes_1.ArrayType && type.elementType instanceof Array;
        _this.isArrayOfObj = type instanceof ctypes_1.ArrayType && (type.elementType instanceof ctypes_1.DictType || type.elementType instanceof ctypes_1.StructType);
        _this.arraySize = type instanceof ctypes_1.ArrayType && new elementaccess_1.CArraySize(scope, arg, type);
        if (_this.isArrayOfString || _this.isArrayOfUniversalVar) {
            _this.iteratorVarName = scope.root.symbolsHelper.addIterator(node);
            scope.variables.push(new variable_1.CVariable(scope, _this.iteratorVarName, ctypes_1.NumberVarType));
            _this.arrayElement = new elementaccess_1.CSimpleElementAccess(scope, type, arg, _this.iteratorVarName);
            _this.lengthVarName = scope.root.symbolsHelper.addTemp(node, "len");
            scope.variables.push(new variable_1.CVariable(scope, _this.lengthVarName, ctypes_1.NumberVarType));
            scope.root.headerFlags.strings = true;
        }
        if (_this.isArrayOfUniversalVar) {
            _this.tmpVarName = scope.root.symbolsHelper.addTemp(node, "tmp", false);
            _this.needDisposeVarName = scope.root.symbolsHelper.addTemp(node, "need_dispose", false);
            if (!scope.variables.some(function (v) { return v.name == _this.tmpVarName; }))
                scope.variables.push(new variable_1.CVariable(scope, _this.tmpVarName, ctypes_1.StringVarType));
            if (!scope.variables.some(function (v) { return v.name == _this.needDisposeVarName; }))
                scope.variables.push(new variable_1.CVariable(scope, _this.needDisposeVarName, ctypes_1.BooleanVarType));
            scope.root.headerFlags.js_var_to_str = true;
        }
        return _this;
    }
    CAsString_Length = __decorate([
        template_1.CodeTemplate("\n{#statements}\n    {#if isArrayOfString}\n        {lengthVarName} = {arraySize};\n        for ({iteratorVarName} = 0; {iteratorVarName} < {arraySize}; {iteratorVarName}++)\n            {lengthVarName} += strlen({arrayElement});\n    {#elseif isArrayOfUniversalVar}\n        {lengthVarName} = {arraySize};\n        for ({iteratorVarName} = 0; {iteratorVarName} < {arraySize}; {iteratorVarName}++) {\n            {lengthVarName} += strlen({tmpVarName} = js_var_to_str({arrayElement}, &{needDisposeVarName}));\n            if ({needDisposeVarName})\n                free((void *){tmpVarName});\n        }\n    {/if}\n{/statements}\n{#if isNumber}\n    STR_INT16_T_BUFLEN\n{#elseif isString}\n    strlen({arg})\n{#elseif isBoolean}\n    (5-{arg})\n{#elseif isArrayOfNumber}\n    (STR_INT16_T_BUFLEN + 1) * {arraySize}\n{#elseif isArrayOfBoolean}\n    6 * {arraySize}\n{#elseif isArrayOfObj}\n    16 * {arraySize}\n{#elseif isArrayOfString || isArrayOfUniversalVar}\n    {lengthVarName}\n{#elseif isArrayOfArray}\n    /* determining string length of array {arg} is not supported yet */\n{#else}\n    15\n{/if}")
    ], CAsString_Length);
    return CAsString_Length;
}(template_1.CTemplateBase));
exports.CAsString_Length = CAsString_Length;
var CAsString_Concat = /** @class */ (function (_super) {
    __extends(CAsString_Concat, _super);
    function CAsString_Concat(scope, node, buf, arg, type) {
        var _this = _super.call(this) || this;
        _this.buf = buf;
        _this.arg = arg;
        _this.type = type;
        _this.isArray = false;
        _this.isNumber = type === ctypes_1.NumberVarType;
        _this.isString = type === ctypes_1.StringVarType;
        _this.isBoolean = type === ctypes_1.BooleanVarType;
        _this.isUniversalVar = type === ctypes_1.UniversalVarType;
        if (_this.isNumber)
            scope.root.headerFlags.str_int16_t_cat = true;
        if (_this.isUniversalVar) {
            _this.tmpVarName = scope.root.symbolsHelper.addTemp(node, "tmp", false);
            _this.needDisposeVarName = scope.root.symbolsHelper.addTemp(node, "need_dispose", false);
            if (!scope.variables.some(function (v) { return v.name == _this.tmpVarName; }))
                scope.variables.push(new variable_1.CVariable(scope, _this.tmpVarName, ctypes_1.StringVarType));
            if (!scope.variables.some(function (v) { return v.name == _this.needDisposeVarName; }))
                scope.variables.push(new variable_1.CVariable(scope, _this.needDisposeVarName, ctypes_1.BooleanVarType));
            scope.root.headerFlags.js_var_to_str = true;
        }
        if (type instanceof ctypes_1.ArrayType) {
            _this.isArray = true;
            _this.iteratorVarName = scope.root.symbolsHelper.addIterator(node);
            scope.variables.push(new variable_1.CVariable(scope, _this.iteratorVarName, ctypes_1.NumberVarType));
            var arrayElement = new elementaccess_1.CSimpleElementAccess(scope, type, arg, _this.iteratorVarName);
            _this.arrayElementCat = new CAsString_Concat_1(scope, node, buf, arrayElement, type.elementType);
            _this.arraySize = new elementaccess_1.CArraySize(scope, arg, type);
        }
        return _this;
    }
    CAsString_Concat_1 = CAsString_Concat;
    CAsString_Concat = CAsString_Concat_1 = __decorate([
        template_1.CodeTemplate("\n{#if isNumber}\n    str_int16_t_cat({buf}, {arg});\n{#elseif isString}\n    strcat({buf}, {arg});\n{#elseif isBoolean}\n    strcat({buf}, {arg} ? \"true\" : \"false\");\n{#elseif isUniversalVar}\n    strcat({buf}, ({tmpVarName} = js_var_to_str({arg}, &{needDisposeVarName})));\n    if ({needDisposeVarName})\n        free((void *){tmpVarName});\n{#elseif isArray}\n    for ({iteratorVarName} = 0; {iteratorVarName} < {arraySize}; {iteratorVarName}++) {\n        if ({iteratorVarName} != 0)\n            strcat({buf}, \",\");\n        {arrayElementCat}\n    }\n{#else}\n    strcat({buf}, \"[object Object]\");\n{/if}\n")
    ], CAsString_Concat);
    return CAsString_Concat;
    var CAsString_Concat_1;
}(template_1.CTemplateBase));
exports.CAsString_Concat = CAsString_Concat;
//# sourceMappingURL=typeconvert.js.map