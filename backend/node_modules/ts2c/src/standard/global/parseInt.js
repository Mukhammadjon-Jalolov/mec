"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var ts = require("typescript");
var template_1 = require("../../template");
var standard_1 = require("../../standard");
var ctypes_1 = require("../../types/ctypes");
var ParseIntResolver = /** @class */ (function () {
    function ParseIntResolver() {
    }
    ParseIntResolver.prototype.matchesNode = function (typeHelper, call) {
        return call.expression.kind === ts.SyntaxKind.Identifier && call.expression.getText() === "parseInt";
    };
    ParseIntResolver.prototype.returnType = function (typeHelper, call) {
        return ctypes_1.NumberVarType;
    };
    ParseIntResolver.prototype.createTemplate = function (scope, node) {
        return new CParseInt(scope, node);
    };
    ParseIntResolver.prototype.needsDisposal = function (typeHelper, node) {
        return false;
    };
    ParseIntResolver.prototype.getTempVarName = function (typeHelper, node) {
        return null;
    };
    ParseIntResolver.prototype.getEscapeNode = function (typeHelper, node) {
        return null;
    };
    ParseIntResolver = __decorate([
        standard_1.StandardCallResolver
    ], ParseIntResolver);
    return ParseIntResolver;
}());
var CParseInt = /** @class */ (function (_super) {
    __extends(CParseInt, _super);
    function CParseInt(scope, call) {
        var _this = _super.call(this) || this;
        _this.arguments = call.arguments.map(function (a) { return template_1.CodeTemplateFactory.createForNode(scope, a); });
        scope.root.headerFlags.parse_int16_t = true;
        return _this;
    }
    CParseInt = __decorate([
        template_1.CodeTemplate("parse_int16_t({arguments {, }=> {this}})")
    ], CParseInt);
    return CParseInt;
}(template_1.CTemplateBase));
//# sourceMappingURL=parseInt.js.map