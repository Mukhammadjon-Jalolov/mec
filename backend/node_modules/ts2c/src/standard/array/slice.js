"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var ts = require("typescript");
var template_1 = require("../../template");
var standard_1 = require("../../standard");
var ctypes_1 = require("../../types/ctypes");
var variable_1 = require("../../nodes/variable");
var elementaccess_1 = require("../../nodes/elementaccess");
var ArraySliceResolver = /** @class */ (function () {
    function ArraySliceResolver() {
    }
    ArraySliceResolver.prototype.matchesNode = function (typeHelper, call) {
        if (call.expression.kind != ts.SyntaxKind.PropertyAccessExpression)
            return false;
        var propAccess = call.expression;
        var objType = typeHelper.getCType(propAccess.expression);
        return propAccess.name.getText() == "slice" && objType instanceof ctypes_1.ArrayType;
    };
    ArraySliceResolver.prototype.returnType = function (typeHelper, call) {
        var _a = getSliceParams(typeHelper, call), size = _a.size, dynamic = _a.dynamic, elementType = _a.elementType;
        return new ctypes_1.ArrayType(elementType, size, dynamic);
    };
    ArraySliceResolver.prototype.createTemplate = function (scope, node) {
        return new CArraySlice(scope, node);
    };
    ArraySliceResolver.prototype.needsDisposal = function (typeHelper, call) {
        var dynamic = getSliceParams(typeHelper, call).dynamic;
        return call.parent.kind != ts.SyntaxKind.ExpressionStatement && dynamic;
    };
    ArraySliceResolver.prototype.getTempVarName = function (typeHelper, node) {
        return "tmp_slice";
    };
    ArraySliceResolver.prototype.getEscapeNode = function (typeHelper, node) {
        return null;
    };
    ArraySliceResolver = __decorate([
        standard_1.StandardCallResolver
    ], ArraySliceResolver);
    return ArraySliceResolver;
}());
var CArraySlice = /** @class */ (function (_super) {
    __extends(CArraySlice, _super);
    function CArraySlice(scope, call) {
        var _this = _super.call(this) || this;
        _this.tempVarName = '';
        _this.iteratorVarName = '';
        _this.sizeVarName = '';
        _this.startVarName = '';
        _this.endVarName = '';
        _this.simpleSlice = false;
        _this.simpleSliceSize = 0;
        _this.simpleSliceStart = 0;
        _this.topExpressionOfStatement = call.parent.kind == ts.SyntaxKind.ExpressionStatement;
        if (_this.topExpressionOfStatement)
            return _this;
        var propAccess = call.expression;
        var varType = scope.root.typeHelper.getCType(propAccess.expression);
        var varAccess = new elementaccess_1.CElementAccess(scope, propAccess.expression);
        _this.arraySize = new elementaccess_1.CSimpleElementAccess(scope, varType, varAccess, "length");
        _this.arrayDataAccess = new CArrayDataAccess(scope, varAccess, varType.isDynamicArray);
        _this.iteratorVarName = scope.root.symbolsHelper.addIterator(propAccess);
        scope.variables.push(new variable_1.CVariable(scope, _this.iteratorVarName, ctypes_1.NumberVarType));
        var args = call.arguments.map(function (a) { return template_1.CodeTemplateFactory.createForNode(scope, a); });
        _this.startIndexArg = args[0];
        _this.endIndexArg = args.length == 2 ? args[1] : null;
        var _a = getSliceParams(scope.root.typeHelper, call), start = _a.start, size = _a.size, dynamic = _a.dynamic;
        if (!dynamic) {
            _this.simpleSlice = true;
            _this.simpleSliceStart = start;
            _this.simpleSliceSize = size;
            var reuseVariable = tryReuseExistingVariable(call);
            if (reuseVariable)
                _this.tempVarName = reuseVariable.getText();
            else {
                _this.tempVarName = scope.root.symbolsHelper.addTemp(propAccess, "tmp_slice");
                scope.variables.push(new variable_1.CVariable(scope, _this.tempVarName, new ctypes_1.ArrayType(varType.elementType, _this.simpleSliceSize, false)));
            }
            return _this;
        }
        _this.tempVarName = scope.root.memoryManager.getReservedTemporaryVarName(call);
        var arrayType = scope.root.typeHelper.getCType(propAccess.expression);
        var tempVarType = new ctypes_1.ArrayType(arrayType.elementType, 0, true);
        if (!scope.root.memoryManager.variableWasReused(call))
            scope.variables.push(new variable_1.CVariable(scope, _this.tempVarName, tempVarType));
        _this.sizeVarName = scope.root.symbolsHelper.addTemp(propAccess, _this.tempVarName + "_size");
        scope.variables.push(new variable_1.CVariable(scope, _this.sizeVarName, ctypes_1.NumberVarType));
        _this.startVarName = scope.root.symbolsHelper.addTemp(propAccess, _this.tempVarName + "_start");
        scope.variables.push(new variable_1.CVariable(scope, _this.startVarName, ctypes_1.NumberVarType));
        if (args.length == 2) {
            _this.endVarName = scope.root.symbolsHelper.addTemp(propAccess, _this.tempVarName + "_end");
            scope.variables.push(new variable_1.CVariable(scope, _this.endVarName, ctypes_1.NumberVarType));
        }
        scope.root.headerFlags.array = true;
        return _this;
    }
    CArraySlice = __decorate([
        template_1.CodeTemplate("\n{#statements}\n    {#if !topExpressionOfStatement && simpleSlice }\n        for ({iteratorVarName} = 0; {iteratorVarName} < {simpleSliceSize}; {iteratorVarName}++)\n            {tempVarName}[{iteratorVarName}] = {arrayDataAccess}[{iteratorVarName} + {simpleSliceStart}];\n    {#elseif !topExpressionOfStatement && !simpleSlice && !endIndexArg}\n        {sizeVarName} = ({startIndexArg}) < 0 ? -({startIndexArg}) : {arraySize} - ({startIndexArg});\n        {startVarName} = ({startIndexArg}) < 0 ? {arraySize} + ({startIndexArg}) : ({startIndexArg});\n        ARRAY_CREATE({tempVarName}, {sizeVarName}, {sizeVarName});\n        for ({iteratorVarName} = 0; {iteratorVarName} < {sizeVarName}; {iteratorVarName}++)\n            {tempVarName}->data[{iteratorVarName}] = {arrayDataAccess}[{iteratorVarName} + {startVarName}];\n    {#elseif !topExpressionOfStatement && !simpleSlice && endIndexArg}\n        {startVarName} = ({startIndexArg}) < 0 ? {arraySize} + ({startIndexArg}) : ({startIndexArg});\n        {endVarName} = ({endIndexArg}) < 0 ? {arraySize} + ({endIndexArg}) : ({endIndexArg});\n        {sizeVarName} = {endVarName} - {startVarName};\n        ARRAY_CREATE({tempVarName}, {sizeVarName}, {sizeVarName});\n        for ({iteratorVarName} = 0; {iteratorVarName} < {sizeVarName}; {iteratorVarName}++)\n            {tempVarName}->data[{iteratorVarName}] = {arrayDataAccess}[{iteratorVarName} + {startVarName}];\n    {/if}\n{/statements}\n{#if topExpressionOfStatement}\n    /* slice doesn't have side effects, skipping */\n{#else}\n    {tempVarName}\n{/if}")
    ], CArraySlice);
    return CArraySlice;
}(template_1.CTemplateBase));
var CArrayDataAccess = /** @class */ (function () {
    function CArrayDataAccess(scope, elementAccess, isDynamicArray) {
        this.elementAccess = elementAccess;
        this.isDynamicArray = isDynamicArray;
    }
    CArrayDataAccess = __decorate([
        template_1.CodeTemplate("\n{#if isDynamicArray}\n    {elementAccess}->data\n{#else}\n    {elementAccess}\n{/if}")
    ], CArrayDataAccess);
    return CArrayDataAccess;
}());
function getSliceParams(typeHelper, call) {
    var params = { start: 0, size: 0, dynamic: true, elementType: null };
    if (!ts.isPropertyAccessExpression(call.expression))
        return params;
    var objType = typeHelper.getCType(call.expression.expression);
    if (!(objType instanceof ctypes_1.ArrayType))
        return params;
    params.elementType = objType.elementType;
    var reuseVar = tryReuseExistingVariable(call);
    var reuseVarType = reuseVar && typeHelper.getCType(reuseVar);
    var reuseVarIsDynamicArray = reuseVar && reuseVarType instanceof ctypes_1.ArrayType && reuseVarType.isDynamicArray;
    var isSimpleSlice = !reuseVarIsDynamicArray && !objType.isDynamicArray && call.arguments.every(function (a) { return ts.isNumericLiteral(a) || ts.isPrefixUnaryExpression(a) && a.operator == ts.SyntaxKind.MinusToken && ts.isNumericLiteral(a.operand); });
    if (isSimpleSlice) {
        var arraySize = objType.capacity;
        var startIndexArg = +call.arguments[0].getText();
        if (call.arguments.length == 1) {
            params.start = startIndexArg < 0 ? arraySize + startIndexArg : startIndexArg;
            params.size = startIndexArg < 0 ? -startIndexArg : arraySize - startIndexArg;
        }
        else {
            var endIndexArg = +call.arguments[1].getText();
            params.start = startIndexArg < 0 ? arraySize + startIndexArg : startIndexArg;
            params.size = (endIndexArg < 0 ? arraySize + endIndexArg : endIndexArg) - params.start;
        }
        params.dynamic = params.size <= 0; // C standard doesn't allow creating static arrays with zero size, so we have to go with a dynamic array if size is 0
    }
    return params;
}
function tryReuseExistingVariable(node) {
    if (node.parent.kind == ts.SyntaxKind.BinaryExpression) {
        var assignment = node.parent;
        if (assignment.left.kind == ts.SyntaxKind.Identifier)
            return assignment.left;
    }
    if (node.parent.kind == ts.SyntaxKind.VariableDeclaration) {
        var assignment = node.parent;
        if (assignment.name.kind == ts.SyntaxKind.Identifier)
            return assignment.name;
    }
    return null;
}
//# sourceMappingURL=slice.js.map