"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var ts = require("typescript");
var template_1 = require("../../template");
var standard_1 = require("../../standard");
var ctypes_1 = require("../../types/ctypes");
var variable_1 = require("../../nodes/variable");
var elementaccess_1 = require("../../nodes/elementaccess");
var ArraySortResolver = /** @class */ (function () {
    function ArraySortResolver() {
    }
    ArraySortResolver.prototype.matchesNode = function (typeHelper, call, options) {
        if (call.expression.kind != ts.SyntaxKind.PropertyAccessExpression)
            return false;
        var propAccess = call.expression;
        var objType = typeHelper.getCType(propAccess.expression);
        return propAccess.name.getText() == "reverse" && (objType && objType instanceof ctypes_1.ArrayType && objType.isDynamicArray || options && options.determineObjectType);
    };
    ArraySortResolver.prototype.objectType = function (typeHelper, call) {
        return new ctypes_1.ArrayType(ctypes_1.PointerVarType, 0, true);
    };
    ArraySortResolver.prototype.returnType = function (typeHelper, call) {
        var propAccess = call.expression;
        return typeHelper.getCType(propAccess.expression);
    };
    ArraySortResolver.prototype.createTemplate = function (scope, node) {
        return new CArrayReverse(scope, node);
    };
    ArraySortResolver.prototype.needsDisposal = function (typeHelper, node) {
        return false;
    };
    ArraySortResolver.prototype.getTempVarName = function (typeHelper, node) {
        return "";
    };
    ArraySortResolver.prototype.getEscapeNode = function (typeHelper, node) {
        return null;
    };
    ArraySortResolver = __decorate([
        standard_1.StandardCallResolver
    ], ArraySortResolver);
    return ArraySortResolver;
}());
var CArrayReverse = /** @class */ (function (_super) {
    __extends(CArrayReverse, _super);
    function CArrayReverse(scope, call) {
        var _this = _super.call(this) || this;
        _this.varAccess = null;
        var propAccess = call.expression;
        var type = scope.root.typeHelper.getCType(propAccess.expression);
        _this.varAccess = new elementaccess_1.CElementAccess(scope, propAccess.expression);
        _this.topExpressionOfStatement = call.parent.kind == ts.SyntaxKind.ExpressionStatement;
        _this.iteratorVar1 = scope.root.symbolsHelper.addIterator(call);
        _this.iteratorVar2 = scope.root.symbolsHelper.addIterator(call);
        _this.tempVarName = scope.root.symbolsHelper.addTemp(call, "temp");
        scope.variables.push(new variable_1.CVariable(scope, _this.iteratorVar1, ctypes_1.NumberVarType));
        scope.variables.push(new variable_1.CVariable(scope, _this.iteratorVar2, ctypes_1.NumberVarType));
        scope.variables.push(new variable_1.CVariable(scope, _this.tempVarName, type.elementType));
        return _this;
    }
    CArrayReverse = __decorate([
        template_1.CodeTemplate("\n{#statements}\n    {iteratorVar1} = 0;\n    {iteratorVar2} = {varAccess}->size - 1;\n    while ({iteratorVar1} < {iteratorVar2}) {\n        {tempVarName} = {varAccess}->data[{iteratorVar1}];\n        {varAccess}->data[{iteratorVar1}] = {varAccess}->data[{iteratorVar2}];\n        {varAccess}->data[{iteratorVar2}] = {tempVarName};\n        {iteratorVar1}++;\n        {iteratorVar2}--;\n    }\n{/statements}\n{#if !topExpressionOfStatement}\n    {varAccess}\n{/if}")
    ], CArrayReverse);
    return CArrayReverse;
}(template_1.CTemplateBase));
//# sourceMappingURL=reverse.js.map