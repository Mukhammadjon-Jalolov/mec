"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var ts = require("typescript");
var template_1 = require("../../template");
var standard_1 = require("../../standard");
var ctypes_1 = require("../../types/ctypes");
var variable_1 = require("../../nodes/variable");
var elementaccess_1 = require("../../nodes/elementaccess");
var typeconvert_1 = require("../../nodes/typeconvert");
var ArrayPushResolver = /** @class */ (function () {
    function ArrayPushResolver() {
    }
    ArrayPushResolver.prototype.matchesNode = function (typeHelper, call, options) {
        if (call.expression.kind != ts.SyntaxKind.PropertyAccessExpression)
            return false;
        var propAccess = call.expression;
        var objType = typeHelper.getCType(propAccess.expression);
        return propAccess.name.getText() == "push" && (objType && objType instanceof ctypes_1.ArrayType && objType.isDynamicArray || options && options.determineObjectType);
    };
    ArrayPushResolver.prototype.objectType = function (typeHelper, call) {
        var elementType = call.arguments[0] && typeHelper.getCType(call.arguments[0]);
        return new ctypes_1.ArrayType(elementType || ctypes_1.PointerVarType, 0, true);
    };
    ArrayPushResolver.prototype.argumentTypes = function (typeHelper, call) {
        var propAccess = call.expression;
        var objType = typeHelper.getCType(propAccess.expression);
        return call.arguments.map(function (a) { return objType instanceof ctypes_1.ArrayType ? objType.elementType : null; });
    };
    ArrayPushResolver.prototype.returnType = function (typeHelper, call) {
        return ctypes_1.NumberVarType;
    };
    ArrayPushResolver.prototype.createTemplate = function (scope, node) {
        return new CArrayPush(scope, node);
    };
    ArrayPushResolver.prototype.needsDisposal = function (typeHelper, node) {
        return false;
    };
    ArrayPushResolver.prototype.getTempVarName = function (typeHelper, node) {
        return null;
    };
    ArrayPushResolver.prototype.getEscapeNode = function (typeHelper, node) {
        return node.expression.expression;
    };
    ArrayPushResolver = __decorate([
        standard_1.StandardCallResolver
    ], ArrayPushResolver);
    return ArrayPushResolver;
}());
var CArrayPush = /** @class */ (function (_super) {
    __extends(CArrayPush, _super);
    function CArrayPush(scope, call) {
        var _this = _super.call(this) || this;
        _this.tempVarName = '';
        _this.varAccess = null;
        _this.pushValues = [];
        var propAccess = call.expression;
        var type = scope.root.typeHelper.getCType(propAccess.expression);
        _this.varAccess = new elementaccess_1.CElementAccess(scope, propAccess.expression);
        var args = call.arguments.map(function (a) { return type.elementType === ctypes_1.UniversalVarType ? new typeconvert_1.CAsUniversalVar(scope, a) : template_1.CodeTemplateFactory.createForNode(scope, a); });
        _this.pushValues = args.map(function (a) { return new CPushValue(scope, _this.varAccess, a); });
        _this.topExpressionOfStatement = call.parent.kind == ts.SyntaxKind.ExpressionStatement;
        if (!_this.topExpressionOfStatement) {
            _this.tempVarName = scope.root.symbolsHelper.addTemp(propAccess, "arr_size");
            scope.variables.push(new variable_1.CVariable(scope, _this.tempVarName, ctypes_1.NumberVarType));
        }
        scope.root.headerFlags.array = true;
        return _this;
    }
    CArrayPush = __decorate([
        template_1.CodeTemplate("\n{#statements}\n    {#if !topExpressionOfStatement}\n        {pushValues}\n        {tempVarName} = {varAccess}->size;\n    {/if}\n{/statements}\n{#if topExpressionOfStatement}\n    {pushValues}\n{#else}\n    {tempVarName}\n{/if}")
    ], CArrayPush);
    return CArrayPush;
}(template_1.CTemplateBase));
var CPushValue = /** @class */ (function () {
    function CPushValue(scope, varAccess, value) {
        this.varAccess = varAccess;
        this.value = value;
    }
    CPushValue = __decorate([
        template_1.CodeTemplate("ARRAY_PUSH({varAccess}, {value});\n")
    ], CPushValue);
    return CPushValue;
}());
//# sourceMappingURL=push.js.map