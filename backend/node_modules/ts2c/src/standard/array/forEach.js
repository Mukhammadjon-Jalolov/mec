"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var ts = require("typescript");
var ctypes_1 = require("../../types/ctypes");
var elementaccess_1 = require("../../nodes/elementaccess");
var template_1 = require("../../template");
var variable_1 = require("../../nodes/variable");
var standard_1 = require("../../standard");
var ArrayForEachResolver = /** @class */ (function () {
    function ArrayForEachResolver() {
    }
    ArrayForEachResolver.prototype.matchesNode = function (typeHelper, call) {
        if (call.expression.kind != ts.SyntaxKind.PropertyAccessExpression)
            return false;
        var propAccess = call.expression;
        var objType = typeHelper.getCType(propAccess.expression);
        return propAccess.name.getText() == "forEach" && objType instanceof ctypes_1.ArrayType;
    };
    ArrayForEachResolver.prototype.returnType = function (typeHelper, call) {
        return ctypes_1.NumberVarType;
    };
    ArrayForEachResolver.prototype.createTemplate = function (scope, node) {
        return new CArrayForEach(scope, node);
    };
    ArrayForEachResolver.prototype.needsDisposal = function (typeHelper, node) {
        return false;
    };
    ArrayForEachResolver.prototype.getTempVarName = function (typeHelper, node) {
        return null;
    };
    ArrayForEachResolver.prototype.getEscapeNode = function (typeHelper, node) {
        return node;
    };
    ArrayForEachResolver = __decorate([
        standard_1.StandardCallResolver
    ], ArrayForEachResolver);
    return ArrayForEachResolver;
}());
var CArrayForEach = /** @class */ (function (_super) {
    __extends(CArrayForEach, _super);
    function CArrayForEach(scope, call) {
        var _this = _super.call(this) || this;
        _this.variables = [];
        _this.statements = [];
        _this.iteratorFnAccess = null;
        _this.arraySize = '';
        _this.parent = scope;
        _this.func = scope.func;
        _this.root = scope.root;
        var propAccess = call.expression;
        var objType = scope.root.typeHelper.getCType(propAccess.expression);
        _this.varAccess = template_1.CodeTemplateFactory.templateToString(new elementaccess_1.CElementAccess(scope, propAccess.expression));
        _this.topExpressionOfStatement = call.parent.kind == ts.SyntaxKind.ExpressionStatement;
        _this.iteratorVarName = scope.root.symbolsHelper.addIterator(call);
        _this.arraySize = objType.isDynamicArray ? _this.varAccess + "->size" : objType.capacity + "";
        var iteratorFunc = call.arguments[0];
        scope.variables.push(new variable_1.CVariable(scope, _this.iteratorVarName, ctypes_1.NumberVarType));
        _this.paramName = iteratorFunc.parameters[0].name.text;
        iteratorFunc.body.statements.forEach(function (s) { return _this.statements.push(template_1.CodeTemplateFactory.createForNode(_this, s)); });
        _this.variables.push(new variable_1.CVariable(scope, _this.paramName, objType.elementType));
        return _this;
    }
    CArrayForEach = __decorate([
        template_1.CodeTemplate("\nfor ({iteratorVarName} = 0; {iteratorVarName} < {arraySize}; {iteratorVarName}++) {\n    {variables {   }=> {this};\n}\n    {paramName} = {varAccess}[{iteratorVarName}];\n    {statements {    }=> {this}}\n}\n")
    ], CArrayForEach);
    return CArrayForEach;
}(template_1.CTemplateBase));
//# sourceMappingURL=forEach.js.map