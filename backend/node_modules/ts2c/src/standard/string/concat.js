"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var ts = require("typescript");
var template_1 = require("../../template");
var standard_1 = require("../../standard");
var ctypes_1 = require("../../types/ctypes");
var variable_1 = require("../../nodes/variable");
var elementaccess_1 = require("../../nodes/elementaccess");
var StringConcatResolver = /** @class */ (function () {
    function StringConcatResolver() {
    }
    StringConcatResolver.prototype.matchesNode = function (typeHelper, call) {
        if (call.expression.kind != ts.SyntaxKind.PropertyAccessExpression)
            return false;
        var propAccess = call.expression;
        var objType = typeHelper.getCType(propAccess.expression);
        return propAccess.name.getText() == "concat" && objType == ctypes_1.StringVarType;
    };
    StringConcatResolver.prototype.returnType = function (typeHelper, call) {
        return ctypes_1.StringVarType;
    };
    StringConcatResolver.prototype.createTemplate = function (scope, node) {
        return new CStringConcat(scope, node);
    };
    StringConcatResolver.prototype.needsDisposal = function (typeHelper, node) {
        // if parent is expression statement, then this is the top expression
        // and thus return value is not used, so the temporary variable will not be created
        return node.parent.kind != ts.SyntaxKind.ExpressionStatement;
    };
    StringConcatResolver.prototype.getTempVarName = function (typeHelper, node) {
        return "concatenated_str";
    };
    StringConcatResolver.prototype.getEscapeNode = function (typeHelper, node) {
        return null;
    };
    StringConcatResolver = __decorate([
        standard_1.StandardCallResolver
    ], StringConcatResolver);
    return StringConcatResolver;
}());
var CStringConcat = /** @class */ (function (_super) {
    __extends(CStringConcat, _super);
    function CStringConcat(scope, call) {
        var _this = _super.call(this) || this;
        _this.tempVarName = '';
        _this.varAccess = null;
        _this.concatValues = [];
        _this.sizes = [];
        var propAccess = call.expression;
        _this.varAccess = new elementaccess_1.CElementAccess(scope, propAccess.expression);
        _this.topExpressionOfStatement = call.parent.kind == ts.SyntaxKind.ExpressionStatement;
        if (!_this.topExpressionOfStatement) {
            _this.tempVarName = scope.root.memoryManager.getReservedTemporaryVarName(call);
            if (!scope.root.memoryManager.variableWasReused(call))
                scope.variables.push(new variable_1.CVariable(scope, _this.tempVarName, "char *"));
            var args = call.arguments.map(function (a) { return ({ node: a, template: template_1.CodeTemplateFactory.createForNode(scope, a) }); });
            var toConcatenate = [{ node: propAccess.expression, template: _this.varAccess }].concat(args);
            _this.sizes = toConcatenate.map(function (a) { return new CGetSize(scope, a.node, a.template); });
            _this.concatValues = toConcatenate.map(function (a) { return new CConcatValue(scope, _this.tempVarName, a.node, a.template); });
        }
        scope.root.headerFlags.strings = true;
        scope.root.headerFlags.malloc = true;
        scope.root.headerFlags.str_int16_t_cat = true;
        return _this;
    }
    CStringConcat = __decorate([
        template_1.CodeTemplate("\n{#statements}\n    {#if !topExpressionOfStatement}\n        {tempVarName} = malloc({sizes{+}=>{this}} + 1);\n        assert({tempVarName} != NULL);\n        ((char *){tempVarName})[0] = '\\0';\n        {concatValues}\n    {/if}\n{/statements}\n{#if !topExpressionOfStatement}\n    {tempVarName}\n{/if}")
    ], CStringConcat);
    return CStringConcat;
}(template_1.CTemplateBase));
var CGetSize = /** @class */ (function () {
    function CGetSize(scope, valueNode, value) {
        this.value = value;
        var type = scope.root.typeHelper.getCType(valueNode);
        this.isNumber = type == ctypes_1.NumberVarType;
    }
    CGetSize = __decorate([
        template_1.CodeTemplate("\n{#if isNumber}\n    STR_INT16_T_BUFLEN\n{#else}\n    strlen({value})\n{/if}")
    ], CGetSize);
    return CGetSize;
}());
var CConcatValue = /** @class */ (function () {
    function CConcatValue(scope, tempVarName, valueNode, value) {
        this.tempVarName = tempVarName;
        this.value = value;
        var type = scope.root.typeHelper.getCType(valueNode);
        this.isNumber = type == ctypes_1.NumberVarType;
    }
    CConcatValue = __decorate([
        template_1.CodeTemplate("\n{#if isNumber}\n    str_int16_t_cat((char *){tempVarName}, {value});\n{#else}\n    strcat((char *){tempVarName}, {value});\n{/if}\n")
    ], CConcatValue);
    return CConcatValue;
}());
//# sourceMappingURL=concat.js.map