"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var ts = require("typescript");
var template_1 = require("../../template");
var standard_1 = require("../../standard");
var ctypes_1 = require("../../types/ctypes");
var variable_1 = require("../../nodes/variable");
var elementaccess_1 = require("../../nodes/elementaccess");
var StringMatchResolver = /** @class */ (function () {
    function StringMatchResolver() {
    }
    StringMatchResolver.prototype.matchesNode = function (typeHelper, call) {
        if (call.expression.kind != ts.SyntaxKind.PropertyAccessExpression)
            return false;
        var propAccess = call.expression;
        var objType = typeHelper.getCType(propAccess.expression);
        return propAccess.name.getText() == "match" && objType == ctypes_1.StringVarType;
    };
    StringMatchResolver.prototype.objectType = function (typeHelper, call) {
        return ctypes_1.StringVarType;
    };
    StringMatchResolver.prototype.argumentTypes = function (typeHelper, call) {
        return call.arguments.map(function (a, i) { return i == 0 ? ctypes_1.RegexVarType : null; });
    };
    StringMatchResolver.prototype.returnType = function (typeHelper, call) {
        return new ctypes_1.ArrayType(ctypes_1.StringVarType, 1, true);
    };
    StringMatchResolver.prototype.createTemplate = function (scope, node) {
        return new CStringMatch(scope, node);
    };
    StringMatchResolver.prototype.needsDisposal = function (typeHelper, node) {
        return node.parent.kind != ts.SyntaxKind.ExpressionStatement;
    };
    StringMatchResolver.prototype.getTempVarName = function (typeHelper, node) {
        return "match_array";
    };
    StringMatchResolver.prototype.getEscapeNode = function (typeHelper, node) {
        return null;
    };
    StringMatchResolver = __decorate([
        standard_1.StandardCallResolver
    ], StringMatchResolver);
    return StringMatchResolver;
}());
exports.StringMatchResolver = StringMatchResolver;
var CStringMatch = /** @class */ (function (_super) {
    __extends(CStringMatch, _super);
    function CStringMatch(scope, call) {
        var _this = _super.call(this) || this;
        _this.topExpressionOfStatement = false;
        _this.gcVarName = null;
        scope.root.headerFlags.str_substring = true;
        var propAccess = call.expression;
        _this.topExpressionOfStatement = call.parent.kind == ts.SyntaxKind.ExpressionStatement;
        if (!_this.topExpressionOfStatement) {
            if (call.arguments.length == 1) {
                _this.argAccess = new elementaccess_1.CElementAccess(scope, propAccess.expression);
                _this.regexVar = template_1.CodeTemplateFactory.createForNode(scope, call.arguments[0]);
                _this.gcVarName = scope.root.memoryManager.getGCVariableForNode(call);
                _this.matchArrayVarName = scope.root.memoryManager.getReservedTemporaryVarName(call);
                if (!scope.root.memoryManager.variableWasReused(call))
                    scope.variables.push(new variable_1.CVariable(scope, _this.matchArrayVarName, new ctypes_1.ArrayType(ctypes_1.StringVarType, 0, true)));
                scope.root.headerFlags.regex_match = true;
                scope.root.headerFlags.array = true;
                scope.root.headerFlags.gc_iterator = true;
            }
            else
                console.log("Unsupported number of parameters in " + call.getText() + ". Expected one parameter.");
        }
        return _this;
    }
    CStringMatch = __decorate([
        template_1.CodeTemplate("\n{#statements}\n    {#if !topExpressionOfStatement}\n        {matchArrayVarName} = regex_match({regexVar}, {argAccess});\n    {/if}\n    {#if !topExpressionOfStatement && gcVarName}\n        ARRAY_PUSH({gcVarName}, (void *){matchArrayVarName});\n    {/if}\n{/statements}\n{#if !topExpressionOfStatement}\n    {matchArrayVarName}\n{/if}")
    ], CStringMatch);
    return CStringMatch;
}(template_1.CTemplateBase));
//# sourceMappingURL=match.js.map