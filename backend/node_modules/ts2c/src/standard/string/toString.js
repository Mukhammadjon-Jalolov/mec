"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var ts = require("typescript");
var template_1 = require("../../template");
var standard_1 = require("../../standard");
var ctypes_1 = require("../../types/ctypes");
var StringToStringResolver = /** @class */ (function () {
    function StringToStringResolver() {
    }
    StringToStringResolver.prototype.matchesNode = function (typeHelper, call) {
        if (call.expression.kind != ts.SyntaxKind.PropertyAccessExpression)
            return false;
        var propAccess = call.expression;
        var objType = typeHelper.getCType(propAccess.expression);
        return ["toString", "valueOf"].indexOf(propAccess.name.getText()) > -1 && objType == ctypes_1.StringVarType;
    };
    StringToStringResolver.prototype.returnType = function (typeHelper, call) {
        return ctypes_1.StringVarType;
    };
    StringToStringResolver.prototype.createTemplate = function (scope, node) {
        return template_1.CodeTemplateFactory.createForNode(scope, node.expression);
    };
    StringToStringResolver.prototype.needsDisposal = function (typeHelper, node) {
        return false;
    };
    StringToStringResolver.prototype.getTempVarName = function (typeHelper, node) {
        return null;
    };
    StringToStringResolver.prototype.getEscapeNode = function (typeHelper, node) {
        return null;
    };
    StringToStringResolver = __decorate([
        standard_1.StandardCallResolver
    ], StringToStringResolver);
    return StringToStringResolver;
}());
//# sourceMappingURL=toString.js.map