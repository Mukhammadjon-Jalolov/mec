"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var ts = require("typescript");
var template_1 = require("../../template");
var standard_1 = require("../../standard");
var ctypes_1 = require("../../types/ctypes");
var variable_1 = require("../../nodes/variable");
var elementaccess_1 = require("../../nodes/elementaccess");
var StringSubstringResolver = /** @class */ (function () {
    function StringSubstringResolver() {
    }
    StringSubstringResolver.prototype.matchesNode = function (typeHelper, call) {
        if (call.expression.kind != ts.SyntaxKind.PropertyAccessExpression)
            return false;
        var propAccess = call.expression;
        var objType = typeHelper.getCType(propAccess.expression);
        return propAccess.name.getText() == "substring" && objType == ctypes_1.StringVarType;
    };
    StringSubstringResolver.prototype.returnType = function (typeHelper, call) {
        return ctypes_1.StringVarType;
    };
    StringSubstringResolver.prototype.createTemplate = function (scope, node) {
        return new CStringSubstring(scope, node);
    };
    StringSubstringResolver.prototype.needsDisposal = function (typeHelper, node) {
        // if parent is expression statement, then this is the top expression
        // and thus return value is not used, so the temporary variable will not be created
        return node.parent.kind != ts.SyntaxKind.ExpressionStatement;
    };
    StringSubstringResolver.prototype.getTempVarName = function (typeHelper, node) {
        return "substr";
    };
    StringSubstringResolver.prototype.getEscapeNode = function (typeHelper, node) {
        return null;
    };
    StringSubstringResolver = __decorate([
        standard_1.StandardCallResolver
    ], StringSubstringResolver);
    return StringSubstringResolver;
}());
var CStringSubstring = /** @class */ (function (_super) {
    __extends(CStringSubstring, _super);
    function CStringSubstring(scope, call) {
        var _this = _super.call(this) || this;
        _this.varAccess = null;
        _this.start = null;
        _this.end = null;
        var propAccess = call.expression;
        _this.varAccess = new elementaccess_1.CElementAccess(scope, propAccess.expression);
        _this.topExpressionOfStatement = call.parent.kind == ts.SyntaxKind.ExpressionStatement;
        if (!_this.topExpressionOfStatement) {
            if (call.arguments.length == 0) {
                console.log("Error in " + call.getText() + ". At least one parameter expected!");
            }
            else {
                _this.tempVarName = scope.root.memoryManager.getReservedTemporaryVarName(call);
                if (!scope.root.memoryManager.variableWasReused(call))
                    scope.variables.push(new variable_1.CVariable(scope, _this.tempVarName, ctypes_1.StringVarType));
                _this.start = template_1.CodeTemplateFactory.createForNode(scope, call.arguments[0]);
                if (call.arguments.length >= 2)
                    _this.end = template_1.CodeTemplateFactory.createForNode(scope, call.arguments[1]);
            }
        }
        scope.root.headerFlags.str_substring = true;
        return _this;
    }
    CStringSubstring = __decorate([
        template_1.CodeTemplate("\n{#statements}\n    {#if !topExpressionOfStatement && start && end}\n        {tempVarName} = str_substring({varAccess}, {start}, {end});\n    {#elseif !topExpressionOfStatement && start && !end}\n        {tempVarName} = str_substring({varAccess}, {start}, str_len({varAccess}));\n    {/if}\n{/statements}\n{#if !topExpressionOfStatement && start}\n    {tempVarName}\n{#elseif !topExpressionOfStatement && !start}\n    /* Error: String.substring requires at least one parameter! */\n{/if}")
    ], CStringSubstring);
    return CStringSubstring;
}(template_1.CTemplateBase));
//# sourceMappingURL=substring.js.map